pluginManagement {
    def flutterSdkPath = {
        def properties = new Properties()
        // Attempt to read local.properties, but provide a default if it doesn't exist or sdk path is not in it.
        // This is important for the subtask environment where local.properties might not be pre-configured by the user.
        def localPropertiesFile = new File(rootProject.projectDir, "local.properties")
        if (localPropertiesFile.exists()) {
            localPropertiesFile.withInputStream { properties.load(it) }
        }
        def sdkPath = properties.getProperty("flutter.sdk")
        if (sdkPath == null) {
            // Provide a default/placeholder SDK path if not found.
            // The actual build will fail if this path is incorrect and Flutter tools aren't found.
            // For CI/testing environments, this path would be set correctly.
            println "flutter.sdk not set in local.properties. Using default placeholder: /opt/flutter"
            sdkPath = "/opt/flutter" // Placeholder path
        }
        assert sdkPath != null, "flutter.sdk not set in local.properties and no default provided"
        return sdkPath
    }()

    includeBuild("\$flutterSdkPath/packages/flutter_tools/gradle")

    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
}

plugins {
    id "dev.flutter.flutter-plugin-loader" version "1.0.0" // apply true is default
    id "com.android.application" version "7.4.2" apply false
    id "org.jetbrains.kotlin.android" version "1.9.22" apply false
}

include ":app"

// Ensure any other existing settings (if any from original file, though it was simple) are appended here.
// The original file had local.properties loading for app_plugin_loader.gradle, which is now handled differently.
// The original assert for localPropertiesFile.exists() and flutterSdkPath != null are now handled inside the closure.
